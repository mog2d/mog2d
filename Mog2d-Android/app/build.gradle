apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    sourceSets {
        main {
            manifest.srcFile '../../sources_android/mog/os_java/AndroidManifest.xml'
            assets.srcDirs = ['../../assets', '../../assets_android']
            res.srcDirs = ['../../sources_android/mog/os_java/res']
            java.srcDirs = ['../../sources_android/mog/os_java']
        }
    }
    defaultConfig {
        applicationId "org.mog2d.mog2d"
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_shared'
            }
            ndk {
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}



def String[] getSourceFiles(File dir, String basePath) {
    File[] files = dir.listFiles();
    List<String> fileList = new ArrayList<>()
    for (File file : files) {
        if (file.isDirectory()) {
            List subFileList = getSourceFiles(file, basePath)
            fileList.addAll(subFileList)
        } else if (file.getPath().endsWith(".cpp") || file.getPath().endsWith(".c")) {
            fileList.add(file.getCanonicalPath().replace(basePath, "\${PROJ_DIR}"));
        }
    }
    return fileList.toArray();
}

task refreshCmakeList << {
    String basePath = new File(project.projectDir.absolutePath + "/../../").getCanonicalPath()
    String[] sourcesFiles = getSourceFiles(new File(basePath + "/sources/"), basePath)
    String[] sourcesAndroidFiles = getSourceFiles(new File(basePath + "/sources_android/"), basePath)
    File cmakeFile = new File(project.projectDir.absolutePath + "/CMakeLists.txt")
    String cmakeContent = cmakeFile.text

    String startStr = "### SOURCE_LIST >> ###";
    String endStr = "### << SOURCE_LIST ###";

    int start = cmakeContent.indexOf(startStr)
    int end = cmakeContent.indexOf(endStr)

    StringBuilder strb = new StringBuilder()
    strb.append(cmakeContent.substring(0, start + startStr.length()) + "\n")
    strb.append("    " + sourcesFiles.join("\n    ") + "\n")
    strb.append("    " + sourcesAndroidFiles.join("\n    ") + "\n")
    strb.append(cmakeContent.substring(end))

    cmakeFile.write(strb.toString())
}
